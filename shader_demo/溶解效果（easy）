Shader "Custom/simple"{
    Properties{
        _Color("Color",Color) = (1,1,1,1)
        _MainTexture("Main Texture",2D) = "white"{}
        _DissolveTexture("Dissolve Texture",2D) = "white"{}
        _DissolveCutoff("Dissolve Cutoff",Range(0,1)) = 1
        _ExtrudeAmount("Extrue Amount",float) = 0
    }
        Subshader{
            Pass{
                CGPROGRAM
                    #pragma vertex vertexFunction
                    #pragma fragment fragmentFunction
                    #include "UnityCG.cginc"

                    struct a2v {
                        float4 vertex:POSITION;
                        float2 uv:TEXCOORD0;
                        float3 normal:NORMAL;
                    };
                    struct v2f {
                        float4 position:SV_POSITION;
                        float2 uv : TEXCOORD0;
                    };
                    float4 _Color;
                    sampler2D _MainTexture;
                    sampler2D _DissolveTexture;
                    float _DissolveCutoff;
                    float _ExtrudeAmount;

                    v2f vertexFunction(a2v v) {
                        v2f o;
                        v.vertex.xyz += v.normal.xyz * _ExtrudeAmount * sin(_Time.y);
                        o.position = UnityObjectToClipPos(v.vertex);
                        o.uv = v.uv;
                        return o;
                    }

                    fixed4 fragmentFunction(v2f i) :SV_TARGET{
                        float4 textureColor = tex2D(_MainTexture,i.uv); //对主纹理的颜色进行采样
                        float4 dissolveColor = tex2D(_DissolveTexture,i.uv);//对纹理颜色进行裁剪采样
                        clip(dissolveColor.rgb - _DissolveCutoff);//从裁剪纹理中减去裁剪值(_DissolveCutoff,property里给的，外部可以移的),如果小于0，不进行绘制
                        return textureColor;//否则，返回主纹理采样颜色
                    }
                ENDCG
            }
        }
}
