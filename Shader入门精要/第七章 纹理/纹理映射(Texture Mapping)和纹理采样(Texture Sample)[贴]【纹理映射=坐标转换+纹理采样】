所谓纹理映射就是将图片"贴"到物体表面的过程.【纹理映射=坐标转换+纹理采样】
简单想象一下, 我们需要将一张四边形的图片"贴"到四边形物体表面, 在图片的四个角上使用铆钉将图片分别钉在物体表面的四个角上, 所以平时也将纹理映射称为"纹理贴图". 这个"贴"字是很形象的.
要将图片"贴"到物体表面, 首先要做的就是将两者的大小做匹配, 如果两者大小一致, 那么直接"贴"上去就行, 如果图片比物体表面大, 那么就需要缩小图片, 反之则需要放大图片, 
还如果我们只想将图片的一部分贴到表面, 那么就需要放大图片, 然后移动图片使需要的那一部分与表面匹配.
当然, 这里的所谓图片的缩放, 本质上只是因为采样坐标的变化, 最后的结果"看起来"像是缩放了图片, 并不是真的对图片进行了缩放.
图片的缩放, 我们一般通过向量的缩放(Scale)操作来完成, 而选取部分贴图, 则通过向量的位移(Transition)来完成.




图片和表面大小匹配好了之后, 我们就需要真正开始"贴"的操作, 这就是所谓纹理采样.
我们知道, 绘制一个表面时, 其实是在给表面的所有顶点着色, 也就是说给每个顶点设置颜色值, 而这个颜色值就是取自纹理(当然也可以取自其它地方).
在绘制每个顶点的时候, 可以将该顶点的坐标转换到纹理坐标, 也就是计算这个顶点的位置在纹理上对应位置的坐标, 然后用这个纹理坐标在纹理上取颜色值, 这就是纹理采样.
而在代码上的实现就更简单了, 纹理的数据会组装成一个二维数组, uv对应的就是数组索引, 纹理采样就是通过索引来取数组的值而已.




总结一下纹理映射:顶点的坐标转换到纹理坐标, 然后通过纹理坐标取颜色值来给顶点着色的过程.
也就是说纹理映射分为两个过程, 一个是坐标转换, 一个是纹理采样.
通常情况下, 坐标转换的过程是引擎自己完成的(直接使用图形API则需要自行转换), 这个过程也比较简单, 就是将物体表面与纹理进行1:1匹配, 就像上文所说, 将物体矩形表面的四个顶点与纹理的四个顶点锚定而已.
也就是说, 引擎传给顶点shader的纹理坐标, 已经是做过1:1匹配之后的结果








补充【TRANSFORM_TEX】
引擎给我们提供了基础的顶点纹理坐标, 我们如果不做任何处理的情况下, 纹理将充满整个表面, 而TRANSFORM_TEX接口可以对纹理坐标做二次处理(缩放和位移)以达到一些更复杂的效果.
因为引擎提供给我们的顶点纹理坐标是1:1映射, 坐标范围基本上不会超过[0, 1], 但是通过TRANSFORM_TEX之后的坐标很可能会处于[0, 1]之外. 比如Tiling.x = 2会造成所有的uv坐标的x坐标放大两倍,
这样的坐标在纹理上是取不到值的.

struct appdata
{
    float4 vertex : POSITION;
    float2 uv : TEXCOORD0;
};

v2f vert (appdata v)
{
    v2f o;
    o.vertex = UnityObjectToClipPos(v.vertex);
    o.uv = TRANSFORM_TEX(v.uv, _MainTex);//坐标转换
    return o;
}

fixed4 frag (v2f i) : SV_Target
{
    // sample the texture
    fixed4 col = tex2D(_MainTex, i.uv);//纹理采样
    return col;
}


'''
tex2d 采样纹理，在vs中不可用
tex2dlod 根据采样点坐标和mip级别，计算偏移值，然后采样，在vs/fs中均可用 （lod -- Level-of-detail）
tex2dproj 与tex2d基本一样，只是在采样前，tex2Dproj将输入的UV xy坐标除以其w坐标，将坐标映射到透视投影（裁剪空间坐标分量w归一的时候使用）
tex2dbias 在偏移mipmap级别（lod bias）后对贴图进行采样, 用于对图像采样结果模糊或锐化
'''

