Shader "Unity Shaders Book/Chapter 5/Simple Shader Struct"
{
    SubShader
    {
        Properties
        {
            // 声明一个Color类型的属性
            _Color("Color Tint", Color) = (1.0, 1.0, 1.0, 1.0)
        }
        Pass
        {
            CGPROGRAM

            #pragma vertex vert // 告诉Unity，顶点着色器的代码在 vert 函数中 （格式：#pragma vertex [name]）
            #pragma fragment frag

            // 使用结构体作为顶点着色器的输入，可以包含更多顶点信息
            // a2v 是当前结构体的名字，可自行定义（写法：struct [StructName]）
            // 这里 a2v 表示 application to vertex ，意思是：把数据从应用阶段传递到顶点着色器中
            struct a2v
            {
                // 模型空间的顶点坐标，相当于之前顶点着色器的输入v
                // 通过 POSITION 语义，告诉顶点着色器，输入v是这个顶点的位置
                // SV_POSITION 语义表示返回的float4类型的变量，是当前顶点在裁剪空间中的位置
                float4 vertex : POSITION;
                // 模型空间中，该顶点的法线方向，使用 NORMAL 语义
                float3 normal : NORMAL;
                // 该模型的第一套纹理坐标（模型可以有多套纹理坐标），第n+1套纹理坐标，用语义 TEXCOORDn
                float4 texcoord : TEXCOORD0;

                // 结构体里变量的书写格式：
                // Type Name : Semantic;
            };
            // Unity支持的语义有：
            // POSITION 、 NORMAL 、 TANGENT 、 TEXCOORD0 、 TEXCOORD1 、 TEXCOORD2 、 TEXCOORD3 、 COLOR 等

             // 使用该结构体定义顶点着色器的输出
            struct v2f
            {
                // SV_POSITION语义表示：pos存储了顶点在裁剪空间中的位置信息
                float4 pos : SV_POSITION;
                // COLOR0语义用于存储颜色信息，当需要存储更多颜色时，可继续用 COLOR1 、 COLOR2等
                fixed3 color : COLOR0;
            };
            //顶点着色器中最基本的任务是把顶点坐标从模型空间转换到裁剪空间，通常可以直接使用内置的MVP矩阵来实现。
            v2f vert(a2v v)
            {
                // 声明输出结构
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                
                // 将法线的值转变成颜色值，呈现到模型上（这里没有必然的法线和颜色的转换关系，仅作案例演示，无需纠结此段代码）
                // 因为法线方向，各分量范围是[-1, 1]，为了让其转变到颜色的范围[0, 1]，故做如下运算：
                o.color = v.normal * 0.5 + fixed3(0.5, 0.5, 0.5);
                return o;
            }

            // 将顶点输出的结构体传入片元着色器中
            fixed4 frag(v2f i) : SV_Target
            {
                // 结构体里定义的color是fixed3类型（我们也可以将其定义为fixed4类型）
                // 输出的颜色为fixed4类型，所以需要补上第四个分量
                return fixed4(i.color, 1.0);
            }
            ENDCG
        }
    }
}


顶点着色器是逐顶点调用的，片元着色器是逐片元（像素）调用的
这意味着顶点着色器的调用次数远远小于片元着色器。为了让每个片元着色器都能有一个结构体的输入，Unity会将非顶点像素的片元着色器的输入结构体的数据由顶点着色器的输出经过插值后得到结果。


顶点着色器：
vertex shader的操作对象是每一个顶点，也就是每个顶点都会做一遍，而且不用写循环
片元着色器：
同样的对于每一个片元（fragment），都会进行操作，且不用写循环
基本上所做的就是设置每个像素的颜色。
基本上所做的就是返回颜色

