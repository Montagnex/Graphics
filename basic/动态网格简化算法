https://zhuanlan.zhihu.com/p/48287438
简化分为三种： 1. 静态的 2. 动态的 3. 视角依赖的
三角边坍缩
对于要坍缩的边uv，删除这条边两侧的面A和面B，用v来替换u，连接v和u的其他邻居点，并删除u。其中v称为u的坍缩目标。
对于一个实体模型（具有封闭的边界，根据边界可以将空间分为模型内部和模型外部两部分），一次坍缩，可以移除两个三角面，三条边和一个顶点。通过反复的迭代，最终就会使模型简化到预期的面数。
但是如何选择要移除的点，才能尽可能小的影响模型的外观呢？这里就需要用到坍缩代价计算公式。
将u坍缩到v（移除u）所需要的代价。第一部分是边的长度，直观上讲，在模型简化过程中，小的细节应该优先被移除。第二部分是u点周围的曲率变化，理论上曲率变化越小的顶点，所处的区域越平坦，应该优先被移除。需要注意的是，将u坍缩到v和将v坍缩到u的代价可能不一样。
实现分为以下步骤： 1. 搜集顶点、三角面和三角边的关系。 
2. 计算坍缩代价和坍缩目标，并排序。 
3. 替换坍缩代价最小的点，并重新计算相邻点的坍缩代价和坍缩目标，更新有序列表。
4. 判断当前顶点数量是否大于目标数量，是则重复第3步。
要将它拆分成离线烘焙和运行时两个部分
离线烘焙：
离线烘焙会输出两个int数组：permutation和vertex_map。
步骤： 1. 收集顶点信息：主要是顶点位置和index，另外需要初始化两个列表：包含顶点的三角面列表和顶点的邻居列表。 
2. 收集三角面信息：获取每个三角面所包含的三个顶点，并计算法线（用于计算曲率）。同时，将该三角面加入顶点的三角面列表，并将每个顶点加入另外两个顶点的邻居列表中去。 
3. 计算顶点与其邻居点的坍缩代价，选择坍缩代价最小的邻居点作为坍缩目标。 
4. 依据坍缩代价对所有的顶点进行排序。 
5. 替换坍缩代价最小的顶点：获取坍缩代价最小的顶点u及其坍缩目标顶点v，遍历u的三角面列表，如果包含v就删除该三角面，否则将u替换为v。重新计算u的邻居点的坍缩代价和坍缩目标，并更新列表。
6. 令permutation[u.index] = 当前顶点数量，令vertex_map[u.index] = v.index (如果没有坍缩目标，则赋值为-1)。 
7. 判断当前顶点总数是否大于0，是则重复第5步。
permutation保存了每个顶点被移除的倒数次序（1是最后被移除的，最大的是第一个被移除的），vertex_map保存了每个顶点的坍缩目标的位置。
运行：
步骤： 1. 遍历三角面  获得当前三角面的三个顶点的index，即idx0、idx1和idx2。 
2. 如果permutation[idx0] >= n，则idx0=vertex_map[idx0]，否则执行1.5。 
3. 如果idx0==-1 or idx1 == idx0 or idx2 == idx0，该三角面不参与绘制。同理映射并判断idx1和idx2。 
4. 返回1.1。 
5. 当前三角面加入绘制列表。 
6. 根据三角面的数据，整理顶点属性。
此外，网格的原始信息会被保留，在游戏运行期间，就可以在任意LOD上自由切换。
